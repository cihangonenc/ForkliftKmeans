import tkinter as tk
from tkinter import ttk
import math
from collections import defaultdict
from sklearn.cluster import KMeans
import numpy as np

# İlaç koordinatları ve eczane isimleri
coordinates = {
    "A": (-3, 0),
    "B": (-1, 0),
    "C": (-4, 0),
    "D": (4, 0),
    "E": (-3, 0),
    "F": (3, 0),
    "G": (-2, 0),
    "H": (-1, 0),
    "K": (5, 0),
    "L": (-2, 0),
    "Depo": (0, 0)
}

eczane_isimleri = [
    "somun", "buyruk", "müşkül", "sevgi", "faruk", "derdest", "tarumar", "zeytin", "kibar", "orhun",
    "Papatya", "Gül", "Menekşe", "Zambak", "Lale", "Orkide", "Nergis", "Sümbül", "Yasemin", "Mimoza",
    "Gelincik", "Akasya", "Çiğdem", "Fulya", "Frezya", "Kamelya", "Begonvil", "Karanfil", "Leylak", "Nilüfer",
    "Defne", "Şebboy", "Petunya", "Sardunya", "Zerrin", "Krizantem", "Anemon", "Hanımeli", "Açelya", "Hercai",
    "Gülşah", "Zinya", "Kardelen", "Fesleğen", "Melisa", "Mor Salkım", "Manolya", "Mine", "Ayçiçeği", "Lavanta"
]
hafta_gunleri = ["Pazartesi", "Salı", "Çarşamba", "Perşembe", "Cuma", "Cumartesi", "Pazar"]

# Örnek sipariş veri seti (eczaneye göre günler)
original_orders = [
    ['2A-2C-3B', '4K-5A-6H', '3C-4B-2K-3A', '4H-5L', '2B-2D-7K', '6A-7B-3G-1L', '1L-4G'],
    ['3L-5C-9A', '3A', '2B-2D-7K', '2B-4K', '1C-5A', '5D', '3B-8H'],
    ['6F-2A-3C', '4H-5L', '2D-5B-6A-7G', '5C-6L', '5L', '2G-3D', '4B-5L'],
    ['4K-5A-3B', '3L-5C-9A', '3C-4H', '1L-6B-4C', '1B-9A', '2H-3F-1A', '3D-5G'],
    ['3B-3F-7G', '4B-5A', '1L-4G', '2B-2D-5K', '3A', '3K-4L', '4K-5A-6H'],
    ['6F-2A-3C', '4H-5L', '4H-5L', '2B-4A-8K', '3L-5G-9C-3A', '7G-5C-6A', '1L-6B-4C'],
    ['2B-2D-5K', '3D-5G', '4C-5L', '4K-5A-6H', '5F', '3B-8H', '7F-5L'],
    ['6H-6K', '2G-3D', '4K-5A-3B', '2B-4K', '1L-4B-4C', '2B-2D-7K', '5C-7L'],
    ['4B-2A-5H', '2G-3F', '4H-5L', '6A-7B-3G-1L', '3A', '5C-6L', '4B-5L'],
    ['5L', '2G-4F', '1B-5F-9A', '3B-3F-7G', '4K-5A-6H', '3L-5C', '2D-5B-6A-7G'],
    ['1H-8D-9H', '7K-5F-8K-3D-5F', '1G-2K-1C-2F', '7C-2B', '1E-9H-9A', '4C-9L-1F-9H-7F', '4H-1G-1K-8C'],
    ['2E-7L-3F', '8D-9L-1B-8C-4D', '8A-6E', '9C-8D-6A-6K-1E', '7E-6C-6L-1C', '9C-1K-6G', '1H-2B'],
    ['4K-6F-4L-2C', '4A-4G-2L-8E-3A', '5E-1K', '8L-2C-5L', '7F-4B-1E-8C', '5F-3F-7C-9D', '9D-8L-1G-9B-2C'],
    ['1K-4B-6E', '6B-1E-4A-5L-7L', '4K-6D-8K-2K', '1L-4D-6F-1G-7A', '8F-7C-1C-8B', '6E-9G-1H', '7K-8F-3F'],
    ['8H-1L-7L-2L', '9E-5F-3C', '6C-3E-2D-1H-7L', '1K-8G', '9G-3E-5H', '3D-6L-3C-6E-4H', '9B-8F-9C-4E'],
    ['3B-9K-5K-6B-2K', '6L-6C-4L-3F', '1B-2C-7C', '2H-4L-1C-4E', '2A-7C-9E-2E-9B', '6B-7F', '2A-9D'],
    ['4C-9A-5K', '2H-8L-6K-8E', '1D-9C-6L', '2F-1G-4L', '3A-6A-3E', '9G-1C-1L-3H', '9C-5C-6D-1B-7H'],
    ['3K-2B-3C-8L', '5A-4B-8A-1D-6C', '2E-6E-6D', '2G-3B-4C-2C-8A', '6K-5D', '5G-5F-6D', '1L-5G'],
    ['9C-5D-4D', '7L-6H-1G', '2E-1A-2A', '4L-4C-3D', '7F-4G-4A-5A-2F', '7B-1H-9E-5A', '7F-4K'],
    ['5F-4G-3B', '3B-1B-1K-4H', '8B-6K-4F-1G-1B', '6K-3K-5B-4E-5B', '1H-1G', '1C-4D', '8L-4L-2H-8B-4C'],
    ['2E-9C', '6B-7D-1A', '8G-5B-2C-7B-6B', '6K-4G-4E-1L', '9K-5L-9K', '8D-9D-4E-7A-2L', '5C-9D'],
    ['6D-9C-7A', '1H-7F-4F-6K-3A', '6B-1K-4C', '7F-8C-3G', '8F-8H-6F-5A-3K', '3G-8A-4F-5B-2L', '8E-9F-9H-1F'],
    ['2A-4A-2H', '6L-3K', '7H-3K', '3F-2A-9B', '6B-8A-7C', '4F-2E-8B', '8E-2C-9K-1F'],
    ['3F-8A-6H-1E-9B', '1L-6F-8E', '8F-5B-9L', '2G-6G-4G-4D', '8F-8H-6F-5A-3K', '3G-8A-4F-5B-2L', '8E-9F-9H-1F'],
    ['2C-3F', '1L-5C-3L-7A', '9B-4D-8G-4E', '5G-3C-9B-7K-2F', '7F-4G-4A-5A-2F', '7B-1H-9E-5A', '7F-4K'],
    ['7K-3B', '2A-3K-6L-7E', '9B-5K', '3B-5B-3L', '7F-4G-4A-5A-2F', '7B-1H-9E-5A', '7F-4K'],
    ['7E-2H-7K', '7C-7F-7C-7B', '5G-6D', '1L-1E-4B', '1H-1G', '1C-4D', '8L-4L-2H-8B-4C'],
    ['9G-2K-4H-6D', '6F-1L', '7L-9K-4A', '2H-3L', '9K-5L-9K', '8D-9D-4E-7A-2L', '5C-9D'],
    ['8F-7K', '2K-5A-5C-5E', '8G-6E-5G-3D-6E', '2B-4L', '8F-8H-6F-5A-3K', '3G-8A-4F-5B-2L', '8E-9F-9H-1F'],
    ['2B-4E-6B-4K-9F', '6H-3D', '2K-5C', '8G-8E-3E-8C-3C', '6B-8A-7C', '4F-2E-8B', '8E-2C-9K-1F'],
    ['3F-6K-4A-5F', '9H-8L-6L-1F-2A', '6A-7A-7C-2H', '6K-9B', '6K-5D', '5G-5F-6D', '1L-5G'],
    ['7A-7C-2B-4H', '2D-9C-5A', '4B-8B-7A-2C-1G', '5L-1B-2E', '7F-4G-4A-5A-2F', '7B-1H-9E-5A', '7F-4K'],
    ['7C-1B-2D-6C-8L', '9G-6L-6A-1L', '8D-6D', '4C-1K-9L', '1H-1G', '1C-4D', '8L-4L-2H-8B-4C'],
    ['1L-1K-2G', '8D-8D-1E-6K-7K', '2D-8K-6K', '8B-4A-9F', '9K-5L-9K', '8D-9D-4E-7A-2L', '5C-9D'],
    ['6L-3B-6D-9B', '5B-6A-1D', '3A-6E-5H-8F-3G', '5E-5F', '8F-8H-6F-5A-3K', '3G-8A-4F-5B-2L', '8E-9F-9H-1F'],
    ['7E-6C-3B-3C-2A', '7D-8B', '1G-8K-8F-9B-1C', '4L-4H', '6B-8A-7C', '4F-2E-8B', '8E-2C-9K-1F'],
    ['7B-1A', '9A-3G', '8G-7G', '5E-3B-1K-2C-6F', '6K-5D', '5G-5F-6D', '1L-5G'],
    ['3F-3F-1F-7B-6L', '8G-6B', '2H-7F-8H-9B-4A', '3G-5E', '7F-4G-4A-5A-2F', '7B-1H-9E-5A', '7F-4K'],
    ['3E-3L-9H', '4B-8D-7K-2H', '5B-1H', '7L-7G-5L-6H', '1H-1G', '1C-4D', '8L-4L-2H-8B-4C'],
    ['1A-7A-4L', '3G-1C-7A-4G', '4B-7B-9D-6K-2F', '6L-5D-5L-6H-1L', '9K-5L-9K', '8D-9D-4E-7A-2L', '5C-9D'],
    ['8B-9E-1K-7K', '5C-4D-2H-2C', '1K-3K-4A-5F', '9G-6B-9F-6K', '8F-8H-6F-5A-3K', '3G-8A-4F-5B-2L', '8E-9F-9H-1F'],
    ['8B-5K-6A-6E', '4G-8E-2K-4D', '7L-1E-1A', '8D-1B-2C-1G-1K', '6B-8A-7C', '4F-2E-8B', '8E-2C-9K-1F'],
    ['9L-3H', '4C-9G-1A-5G-5G', '5F-7C', '2F-2K', '6K-5D', '5G-5F-6D', '1L-5G'],
    ['1F-7C-3K-3B-8E', '8F-8F-2C-6K', '6B-8D-6D-5G-4F', '5G-2E-1L-2F-7B', '7F-4G-4A-5A-2F', '7B-1H-9E-5A', '7F-4K'],
    ['4B-2L', '7C-4B-3K-4C-8E', '8H-7D-9A', '9C-6F-5F', '1H-1G', '1C-4D', '8L-4L-2H-8B-4C'],
    ['3G-7F', '5F-4L-7A-1D-4C', '4L-1H-9L-1B-1E', '6D-4L', '9K-5L-9K', '8D-9D-4E-7A-2L', '5C-9D'],
    ['2C-5A-6D', '9B-3D-1L-2D-1E', '8D-3L', '5E-2D-3A-5C', '8F-8H-6F-5A-3K', '3G-8A-4F-5B-2L', '8E-9F-9H-1F'],
    ['5E-6E-2L', '2C-3F', '2K-9E-8H', '5L-6D-9E', '6B-8A-7C', '4F-2E-8B', '8E-2C-9K-1F'],
    ['4K-5E-3C', '6C-5D-3B-1G', '9E-8B', '3F-8K-4K', '6K-5D', '5G-5F-6D', '1L-5G'],
    ['9L-3H', '4C-9G-1A-5G-5G', '5F-7C', '2F-2K', '6K-5D', '5G-5F-6D', '1L-5G']
]


# Yeni siparişler
eczane_orders = [
    ["aa1", "aa2", "aa3", "aa4", "aa5", "aa6", "aa7"],
    ["ab1", "ab2", "ab3", "ab4", "ab5", "ab6", "ab7"],
    ["ac1", "ac2", "ac3", "ac4", "ac5", "ac6", "ac7"],
    ["ad1", "ad2", "ad3", "ad4", "ad5", "ad6", "ad7"],
    ["ae1", "ae2", "ae3", "ae4", "ae5", "ae6", "ae7"],
    ["af1", "af2", "af3", "af4", "af5", "af6", "af7"],
    ["ag1", "ag2", "ag3", "ag4", "ag5", "ag6", "ag7"],
    ["ah1", "ah2", "ah3", "ah4", "ah5", "ah6", "ah7"],
    ["ai1", "ai2", "ai3", "ai4", "ai5", "ai6", "ai7"],
    ["aj1", "aj2", "aj3", "aj4", "aj5", "aj6", "aj7"],
    ["ak1", "ak2", "ak3", "ak4", "ak5", "ak6", "ak7"],
    ["al1", "al2", "al3", "al4", "al5", "al6", "al7"],
    ["am1", "am2", "am3", "am4", "am5", "am6", "am7"],
    ["an1", "an2", "an3", "an4", "an5", "an6", "an7"],
    ["ao1", "ao2", "ao3", "ao4", "ao5", "ao6", "ao7"],
    ["ap1", "ap2", "ap3", "ap4", "ap5", "ap6", "ap7"],
    ["aq1", "aq2", "aq3", "aq4", "aq5", "aq6", "aq7"],
    ["ar1", "ar2", "ar3", "ar4", "ar5", "ar6", "ar7"],
    ["as1", "as2", "as3", "as4", "as5", "as6", "as7"],
    ["at1", "at2", "at3", "at4", "at5", "at6", "at7"],
    ["au1", "au2", "au3", "au4", "au5", "au6", "au7"],
    ["av1", "av2", "av3", "av4", "av5", "av6", "av7"],
    ["aw1", "aw2", "aw3", "aw4", "aw5", "aw6", "aw7"],
    ["ax1", "ax2", "ax3", "ax4", "ax5", "ax6", "ax7"],
    ["ay1", "ay2", "ay3", "ay4", "ay5", "ay6", "ay7"],
    ["az1", "az2", "az3", "az4", "az5", "az6", "az7"],
    ["ba1", "ba2", "ba3", "ba4", "ba5", "ba6", "ba7"],
    ["bb1", "bb2", "bb3", "bb4", "bb5", "bb6", "bb7"],
    ["bc1", "bc2", "bc3", "bc4", "bc5", "bc6", "bc7"],
    ["bd1", "bd2", "bd3", "bd4", "bd5", "bd6", "bd7"],
    ["be1", "be2", "be3", "be4", "be5", "be6", "be7"],
    ["bf1", "bf2", "bf3", "bf4", "bf5", "bf6", "bf7"],
    ["bg1", "bg2", "bg3", "bg4", "bg5", "bg6", "bg7"],
    ["bh1", "bh2", "bh3", "bh4", "bh5", "bh6", "bh7"],
    ["bi1", "bi2", "bi3", "bi4", "bi5", "bi6", "bi7"],
    ["bj1", "bj2", "bj3", "bj4", "bj5", "bj6", "bj7"],
    ["bk1", "bk2", "bk3", "bk4", "bk5", "bk6", "bk7"],
    ["bl1", "bl2", "bl3", "bl4", "bl5", "bl6", "bl7"],
    ["bm1", "bm2", "bm3", "bm4", "bm5", "bm6", "bm7"],
    ["bn1", "bn2", "bn3", "bn4", "bn5", "bn6", "bn7"],
    ["bo1", "bo2", "bo3", "bo4", "bo5", "bo6", "bo7"],
    ["bp1", "bp2", "bp3", "bp4", "bp5", "bp6", "bp7"],
    ["bq1", "bq2", "bq3", "bq4", "bq5", "bq6", "bq7"],
    ["br1", "br2", "br3", "br4", "br5", "br6", "br7"],
    ["bs1", "bs2", "bs3", "bs4", "bs5", "bs6", "bs7"],
    ["bt1", "bt2", "bt3", "bt4", "bt5", "bt6", "bt7"],
    ["bu1", "bu2", "bu3", "bu4", "bu5", "bu6", "bu7"],
    ["bv1", "bv2", "bv3", "bv4", "bv5", "bv6", "bv7"],
    ["bw1", "bw2", "bw3", "bw4", "bw5", "bw6", "bw7"],
    ["bx1", "bx2", "bx3", "bx4", "bx5", "bx6", "bx7"]
]

# Öklid mesafesi hesaplama fonksiyonu
def calculate_distance(point1, point2):
    return math.sqrt((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2)

# Forkliftin sipariş toplarken kat edeceği mesafeyi hesaplayan fonksiyon
def calculate_total_distance_for_order(order_name):
    for i, day_orders in enumerate(eczane_orders):
        for j, order in enumerate(day_orders):
            if order == order_name:
                original_order = original_orders[i][j]
                items = original_order.split('-')
                points = [coordinates["Depo"]]
                for item in items:
                    qty = int(item[:-1])
                    medicine = item[-1]
                    points.extend([coordinates[medicine]] * qty)
                points.append(coordinates["Depo"])
                total_distance = 0
                for k in range(len(points) - 1):
                    total_distance += calculate_distance(points[k], points[k + 1])
                return total_distance, points
    return 0, []

# FIFO sırasına göre kapasite kontrolü ve mesafe hesaplama fonksiyonu
def calculate_routes_with_capacity_fifo(day_index):
    orders = eczane_orders
    capacity = 30
    current_capacity = 0
    current_route = []
    total_distance = 0
    routes = []
    collected_orders = []
    deliveries = []

    for i in range(len(orders)):
        order_name = orders[i][day_index]
        order_size = sum(int(item[:-1]) for item in original_orders[i][day_index].split('-'))

        if current_capacity + order_size <= capacity:
            current_capacity += order_size
            collected_orders.append(order_name)
            _, points = calculate_total_distance_for_order(order_name)
            current_route.extend(points[1:-1])
        else:
            current_route = [coordinates["Depo"]] + current_route + [coordinates["Depo"]]
            routes.append(current_route)
            deliveries.append(collected_orders)
            for k in range(len(current_route) - 1):
                total_distance += calculate_distance(current_route[k], current_route[k + 1])
            current_route = []
            collected_orders = []
            current_capacity = 0
            _, points = calculate_total_distance_for_order(order_name)
            current_route.extend(points[1:-1])
            collected_orders.append(order_name)
            current_capacity = order_size

    if current_route:
        current_route = [coordinates["Depo"]] + current_route + [coordinates["Depo"]]
        routes.append(current_route)
        deliveries.append(collected_orders)
        for k in range(len(current_route) - 1):
            total_distance += calculate_distance(current_route[k], current_route[k + 1])

    return total_distance, routes, deliveries

# LIFO sırasına göre kapasite kontrolü ve mesafe hesaplama fonksiyonu
def calculate_routes_with_capacity_lifo(day_index):
    orders = eczane_orders
    capacity = 30
    current_capacity = 0
    current_route = []
    total_distance = 0
    routes = []
    collected_orders = []
    deliveries = []

    for i in range(len(orders) - 1, -1, -1):
        order_name = orders[i][day_index]
        order_size = sum(int(item[:-1]) for item in original_orders[i][day_index].split('-'))

        if current_capacity + order_size <= capacity:
            current_capacity += order_size
            collected_orders.append(order_name)
            _, points = calculate_total_distance_for_order(order_name)
            current_route.extend(points[1:-1])
        else:
            current_route = [coordinates["Depo"]] + current_route + [coordinates["Depo"]]
            routes.append(current_route)
            deliveries.append(collected_orders)
            for k in range(len(current_route) - 1):
                total_distance += calculate_distance(current_route[k], current_route[k + 1])
            current_route = []
            collected_orders = []
            current_capacity = 0
            _, points = calculate_total_distance_for_order(order_name)
            current_route.extend(points[1:-1])
            collected_orders.append(order_name)
            current_capacity = order_size

    if current_route:
        current_route = [coordinates["Depo"]] + current_route + [coordinates["Depo"]]
        routes.append(current_route)
        deliveries.append(collected_orders)
        for k in range(len(current_route) - 1):
            total_distance += calculate_distance(current_route[k], current_route[k + 1])

    return total_distance, routes, deliveries

# Paketlerin ağırlık merkezini hesaplayan fonksiyon
def calculate_centroid(order_name):
    for i, day_orders in enumerate(eczane_orders):
        for j, order in enumerate(day_orders):
            if order == order_name:
                original_order = original_orders[i][j]
                items = original_order.split('-')
                x_sum = 0
                y_sum = 0
                total_qty = 0
                for item in items:
                    qty = int(item[:-1])
                    medicine = item[-1]
                    x_sum += coordinates[medicine][0] * qty
                    y_sum += coordinates[medicine][1] * qty
                    total_qty += qty
                centroid_x = x_sum / total_qty
                centroid_y = y_sum / total_qty
                return (centroid_x, centroid_y)
    return (0, 0)

# KMeans ile paketleri sınıflandırma fonksiyonu
def perform_kmeans_clustering(day_index):
    centroids = []
    for i in range(len(eczane_orders)):
        centroid = calculate_centroid(eczane_orders[i][day_index])
        centroids.append(centroid)

    data = np.array(centroids)
    kmeans = KMeans(n_clusters=3)
    kmeans.fit(data)
    labels = kmeans.labels_
    centers = kmeans.cluster_centers_

    return labels, centers

# KMeans sınıflarına göre kapasite kontrolü ve mesafe hesaplama fonksiyonu
def calculate_routes_with_kmeans(day_index):
    labels, _ = perform_kmeans_clustering(day_index)
    clusters = defaultdict(list)

    for i, label in enumerate(labels):
        clusters[label].append(eczane_orders[i][day_index])

    orders = eczane_orders
    capacity = 30
    routes = []
    total_distance = 0
    deliveries = []

    for cluster in clusters.values():
        current_capacity = 0
        current_route = []
        collected_orders = []
        for order_name in cluster:
            i = next(i for i, orders in enumerate(eczane_orders) if order_name in orders)
            order_size = sum(int(item[:-1]) for item in original_orders[i][day_index].split('-'))

            if current_capacity + order_size <= capacity:
                current_capacity += order_size
                collected_orders.append(order_name)
                _, points = calculate_total_distance_for_order(order_name)
                current_route.extend(points[1:-1])
            else:
                current_route = [coordinates["Depo"]] + current_route + [coordinates["Depo"]]
                routes.append(current_route)
                deliveries.append(collected_orders)
                for k in range(len(current_route) - 1):
                    total_distance += calculate_distance(current_route[k], current_route[k + 1])
                current_route = []
                collected_orders = []
                current_capacity = 0
                _, points = calculate_total_distance_for_order(order_name)
                current_route.extend(points[1:-1])
                collected_orders.append(order_name)
                current_capacity = order_size

        if current_route:
            current_route = [coordinates["Depo"]] + current_route + [coordinates["Depo"]]
            routes.append(current_route)
            deliveries.append(collected_orders)
            for k in range(len(current_route) - 1):
                total_distance += calculate_distance(current_route[k], current_route[k + 1])

    return total_distance, routes, deliveries

# Tkinter GUI kısmı
class ForkliftApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Forklift Sipariş Toplama")

        self.tab_control = ttk.Notebook(root)
        self.summary_tab = ttk.Frame(self.tab_control)
        self.details_tab = ttk.Frame(self.tab_control)
        self.distance_tab = ttk.Frame(self.tab_control)
        self.fifo_tab = ttk.Frame(self.tab_control)
        self.lifo_tab = ttk.Frame(self.tab_control)
        self.kmeans_combined_tab = ttk.Frame(self.tab_control)

        self.tab_control.add(self.summary_tab, text='Özet')
        self.tab_control.add(self.details_tab, text='Detaylar')
        self.tab_control.add(self.distance_tab, text='Mesafe Hesaplama')
        self.tab_control.add(self.fifo_tab, text='FIFO')
        self.tab_control.add(self.lifo_tab, text='LIFO')
        self.tab_control.add(self.kmeans_combined_tab, text='KMeans')

        self.tab_control.pack(expand=1, fill="both")

        self.create_summary_tab()
        self.create_details_tab()
        self.create_distance_tab()
        self.create_fifo_tab()
        self.create_lifo_tab()
        self.create_kmeans_combined_tab()

    def create_summary_tab(self):
        summary_label = tk.Label(self.summary_tab, text="Özet")
        summary_label.pack(padx=10, pady=10)

        tree = ttk.Treeview(self.summary_tab, columns=("Eczane", "Pazartesi", "Salı", "Çarşamba", "Perşembe", "Cuma", "Cumartesi", "Pazar"), show='headings')
        tree.heading("Eczane", text="Eczane")
        tree.heading("Pazartesi", text="Pazartesi")
        tree.heading("Salı", text="Salı")
        tree.heading("Çarşamba", text="Çarşamba")
        tree.heading("Perşembe", text="Perşembe")
        tree.heading("Cuma", text="Cuma")
        tree.heading("Cumartesi", text="Cumartesi")
        tree.heading("Pazar", text="Pazar")

        for i, eczane in enumerate(eczane_isimleri):
            tree.insert("", "end", values=(eczane, *eczane_orders[i]))

        tree.pack(expand=True, fill="both")

    def create_details_tab(self):
        details_label = tk.Label(self.details_tab, text="Detaylar")
        details_label.pack(padx=10, pady=10)

        tree = ttk.Treeview(self.details_tab, columns=("Eczane", "Pazartesi", "Salı", "Çarşamba", "Perşembe", "Cuma", "Cumartesi", "Pazar"), show='headings')
        tree.heading("Eczane", text="Eczane")
        tree.heading("Pazartesi", text="Pazartesi")
        tree.heading("Salı", text="Salı")
        tree.heading("Çarşamba", text="Çarşamba")
        tree.heading("Perşembe", text="Perşembe")
        tree.heading("Cuma", text="Cuma")
        tree.heading("Cumartesi", text="Cumartesi")
        tree.heading("Pazar", text="Pazar")

        for i, eczane in enumerate(eczane_isimleri):
            tree.insert("", "end", values=(eczane, *original_orders[i]))

        tree.pack(expand=True, fill="both")

        map_label = tk.Label(self.details_tab, text="İlaç ve Eczane Haritası")
        map_label.pack(padx=10, pady=10)

        map_frame = ttk.Frame(self.details_tab)
        map_frame.pack(padx=10, pady=10)

        for i, (key, value) in enumerate(coordinates.items()):
            label_key = tk.Label(map_frame, text=f"{key}:")
            label_key.grid(row=i // 2, column=(i % 2) * 2, sticky="e")
            label_value = tk.Label(map_frame, text=f"{value}")
            label_value.grid(row=i // 2, column=(i % 2) * 2 + 1, sticky="w")

    def create_kmeans_combined_tab(self):
        kmeans_combined_label = tk.Label(self.kmeans_combined_tab, text="KMeans")
        kmeans_combined_label.pack(padx=10, pady=10)

        self.kmeans_day_var = tk.StringVar(value="Pazartesi")
        kmeans_day_menu = tk.OptionMenu(self.kmeans_combined_tab, self.kmeans_day_var, *hafta_gunleri)
        kmeans_day_menu.pack(pady=5)

        kmeans_button = tk.Button(self.kmeans_combined_tab, text="KMeans Kümeleme Yap", command=self.calculate_kmeans_clustering)
        kmeans_button.pack(pady=10)

        self.kmeans_result = tk.Text(self.kmeans_combined_tab, width=50, height=15)
        self.kmeans_result.pack()

        kmeansapp_button = tk.Button(self.kmeans_combined_tab, text="KMeansApp Rotaları Hesapla", command=self.calculate_kmeansapp_routes)
        kmeansapp_button.pack(pady=10)

        self.kmeansapp_result = tk.Text(self.kmeans_combined_tab, width=50, height=15)
        self.kmeansapp_result.pack()

    def create_distance_tab(self):
        distance_label = tk.Label(self.distance_tab, text="Mesafe Hesaplama")
        distance_label.pack(padx=10, pady=10)

        self.order_name_entry = tk.Entry(self.distance_tab, width=20)
        self.order_name_entry.pack(pady=5)

        calculate_distance_button = tk.Button(self.distance_tab, text="Mesafeyi Hesapla",
                                              command=self.calculate_distance)
        calculate_distance_button.pack(pady=5)

        self.distance_result = tk.Text(self.distance_tab, width=50, height=15)
        self.distance_result.pack()

    def create_fifo_tab(self):
        fifo_label = tk.Label(self.fifo_tab, text="FIFO: Kapasite ve Mesafe Hesaplama")
        fifo_label.pack(padx=10, pady=10)

        self.fifo_day_var = tk.StringVar(value="Pazartesi")
        fifo_day_menu = tk.OptionMenu(self.fifo_tab, self.fifo_day_var, *hafta_gunleri)
        fifo_day_menu.pack(pady=5)

        calculate_fifo_routes_button = tk.Button(self.fifo_tab, text="Rotaları Hesapla",
                                                 command=self.calculate_fifo_routes)
        calculate_fifo_routes_button.pack(pady=5)

        self.fifo_result = tk.Text(self.fifo_tab, width=50, height=15)
        self.fifo_result.pack()

    def create_lifo_tab(self):
        lifo_label = tk.Label(self.lifo_tab, text="LIFO: Kapasite ve Mesafe Hesaplama")
        lifo_label.pack(padx=10, pady=10)

        self.lifo_day_var = tk.StringVar(value="Pazartesi")
        lifo_day_menu = tk.OptionMenu(self.lifo_tab, self.lifo_day_var, *hafta_gunleri)
        lifo_day_menu.pack(pady=5)

        calculate_lifo_routes_button = tk.Button(self.lifo_tab, text="Rotaları Hesapla",
                                                 command=self.calculate_lifo_routes)
        calculate_lifo_routes_button.pack(pady=5)

        self.lifo_result = tk.Text(self.lifo_tab, width=50, height=15)
        self.lifo_result.pack()

    def calculate_distance(self):
        order_name = self.order_name_entry.get()
        total_distance, points = calculate_total_distance_for_order(order_name)
        self.distance_result.delete('1.0', tk.END)
        self.distance_result.insert(tk.END, f"Toplam Mesafe: {total_distance}\n")
        self.distance_result.insert(tk.END, f"Rota: {points}")

    def calculate_fifo_routes(self):
        selected_day = self.fifo_day_var.get()
        day_index = hafta_gunleri.index(selected_day)
        total_distance, routes, deliveries = calculate_routes_with_capacity_fifo(day_index)
        self.fifo_result.delete('1.0', tk.END)
        self.fifo_result.insert(tk.END, f"Toplam Mesafe: {total_distance}\n")
        for route, delivery in zip(routes, deliveries):
            self.fifo_result.insert(tk.END, f"Rota: {route}\nTeslimatlar: {delivery}\n")

    def calculate_lifo_routes(self):
        selected_day = self.lifo_day_var.get()
        day_index = hafta_gunleri.index(selected_day)
        total_distance, routes, deliveries = calculate_routes_with_capacity_lifo(day_index)
        self.lifo_result.delete('1.0', tk.END)
        self.lifo_result.insert(tk.END, f"Toplam Mesafe: {total_distance}\n")
        for route, delivery in zip(routes, deliveries):
            self.lifo_result.insert(tk.END, f"Rota: {route}\nTeslimatlar: {delivery}\n")

    def calculate_kmeans_clustering(self):
        selected_day = self.kmeans_day_var.get()
        day_index = hafta_gunleri.index(selected_day)
        labels, centers = perform_kmeans_clustering(day_index)
        result_text = "KMeans Kümeleme Sonuçları:\n"
        for i, label in enumerate(labels):
            result_text += f"Order {eczane_orders[i][day_index]} -> Cluster {label} at Centroid {centers[label]}\n"
        result_text += f"\nCluster Centers:\n{centers}"
        self.kmeans_result.delete('1.0', tk.END)
        self.kmeans_result.insert(tk.END, result_text)

    def calculate_kmeansapp_routes(self):
        selected_day = self.kmeans_day_var.get()
        day_index = hafta_gunleri.index(selected_day)
        total_distance, routes, deliveries = calculate_routes_with_kmeans(day_index)
        self.kmeansapp_result.delete('1.0', tk.END)
        self.kmeansapp_result.insert(tk.END, f"Toplam Mesafe: {total_distance}\n")
        for route, delivery in zip(routes, deliveries):
            self.kmeansapp_result.insert(tk.END, f"Rota: {route}\nTeslimatlar: {delivery}\n")


root = tk.Tk()
app = ForkliftApp(root)
root.mainloop()
